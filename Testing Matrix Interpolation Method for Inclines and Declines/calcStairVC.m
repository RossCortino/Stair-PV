function [knee_des, ankle_des, knee_vel_d, ankle_vel_d, estimatedIncline] = calcStairVC(phase, state, q_h_max, q_h_min, predeterminedIncline, ascend, inclineAngle)
%CALCSTAIRVC Summary of this function goes here
%   Detailed explanation goes here

persistent b

X = controllerConstants_StairAscent();
knownInclines = X.inclines;
knee = X.knee;
ankle = X.ankle;

if isempty(b) || state == 2
    b = generateWeightedMatrix(q_h_max, q_h_min, X, predeterminedIncline, ascend, inclineAngle);    
end

hk = knee_VC_func(phase);
ha = ankle_VC_func(phase);

knee_FC = knee*b;
ankle_FC = ankle*b;

knee_des = hk*knee_FC;
ankle_des = ha*ankle_FC;

knee_vel_d = 0;
ankle_vel_d = 0;

estimatedIncline = knownInclines*b;
end

% function hk = knee_VC_func(phase)
% %KNEE_VC_FUNC
% %    HK = KNEE_VC_FUNC(PHASE)
% 
% %    This function was generated by the Symbolic Math Toolbox version 8.6.
% %    09-Aug-2021 09:55:47
% 
% t2 = phase.*pi.*2.0;
% t3 = phase.*pi.*4.0;
% t4 = phase.*pi.*6.0;
% t5 = phase.*pi.*8.0;
% t6 = phase.*pi.*1.0e+1;
% t7 = phase.*pi.*1.2e+1;
% hk = [1.0./2.0,cos(t2),-sin(t2),cos(t3),-sin(t3),cos(t4),-sin(t4),cos(t5),-sin(t5),cos(t6),-sin(t6),cos(t7),-sin(t7),cos(phase.*pi.*1.4e+1)./2.0];
% end
% 
% function ha = ankle_VC_func(phase)
% %ANKLE_VC_FUNC
% %    HA = ANKLE_VC_FUNC(PHASE)
% 
% %    This function was generated by the Symbolic Math Toolbox version 8.6.
% %    09-Aug-2021 09:55:47
% 
% t2 = phase.*pi.*2.0;
% t3 = phase.*pi.*4.0;
% t4 = phase.*pi.*6.0;
% t5 = phase.*pi.*8.0;
% t6 = phase.*pi.*1.0e+1;
% t7 = phase.*pi.*1.2e+1;
% ha = [1.0./2.0,cos(t2),-sin(t2),cos(t3),-sin(t3),cos(t4),-sin(t4),cos(t5),-sin(t5),cos(t6),-sin(t6),cos(t7),-sin(t7),cos(phase.*pi.*1.4e+1)./2.0];
% end
